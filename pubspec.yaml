name: ethical_scanner
description: "Ethical Scanner is a Flutter project for Android and iOS mobile application that 
scans the barcode of a product and tells you if the product meets your ethical standards."
# The following line prevents the package from being accidentally published to
# pub.dev using `flutter pub publish`. This is preferred for private packages.
publish_to: 'none' # Remove this line if you wish to publish to pub.dev

# The following defines the version and build number for your application.
# A version number is three numbers separated by dots, like 1.2.43
# followed by an optional build number separated by a +.
# Both the version and the builder number may be overridden in flutter
# build by specifying --build-name and --build-number, respectively.
# In Android, build-name is used as versionName while build-number used as versionCode.
# Read more about Android versioning at https://developer.android.com/studio/publish/versioning
# In iOS, build-name is used as CFBundleShortVersionString while build-number is used as
# CFBundleVersion.
# Read more about iOS versioning at
# https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html
# In Windows, build-name is used as the major, minor, and patch parts
# of the product and file versions while build-number is used as the build suffix.
version: 0.0.6+6

environment:
  sdk: '>=3.2.3 <4.0.0'

# Dependencies specify other packages that your package needs in order to work.
# To automatically upgrade your package dependencies to the latest versions
# consider running `flutter pub upgrade --major-versions`. Alternatively,
# dependencies can be manually updated by changing the version numbers below to
# the latest version available on pub.dev. To see which dependencies have newer
# versions available, run `flutter pub outdated`.
dependencies:
  # The `bloc` library is a platform-agnostic package that provides the core functionality for
  # implementing the BLoC (Business Logic Component) design pattern1. The `flutter_bloc` package is
  # a Flutter-specific package that integrates the bloc library with Flutter widgets, such as
  # `BlocProvider` and `BlocBuilder`. To use bloc in a Flutter app, you need both packages because
  # they complement each other. The `bloc` package handles the logic and state management, while
  # the `flutter_bloc` package handles the UI and presentation layer. You can think of the bloc
  # package as the engine, and the `flutter_bloc` package as the car body. You need both to make a
  # functional car ðŸš—.
  bloc: ^8.1.2
  camera: ^0.10.5+9
  collection: ^1.18.0
  # Dart SDK for openAI Apis (GPT-3 & DALL-E), integrate easily the power of OpenAI's
  # state-of-the-art AI models into their Dart applications.
  dart_openai: ^5.0.0
  dio: ^5.4.0
  entities:
    path: ./components/core/entities

  # Explicitly reads environment variables into a dart file from a .env file for more security and
  # faster start up times.
  envied: ^0.5.3
  feedback: ^3.0.0
  flutter:
    sdk: flutter

  # Built to be used with the `bloc` state management package.
  flutter_bloc: ^8.1.3

  # Localization / internationalization (i18n) library.
  flutter_translate: ^4.0.4

  interface_adapters:
    path: ./components/interface_adapters

  json_annotation: ^4.8.1
  logger: ^2.0.2+1
  openfoodfacts: ^3.4.0

  package_info_plus: ^5.0.1
  path: any
  retrofit: ^4.1.0
  retrofit_generator: ^8.1.0
  shared_preferences: ^2.2.2
  use_cases:
    path: ./components/core/use_cases

dev_dependencies:
  # A build system for Dart code generation and modular compilation.
  build_runner: ^2.4.8

  # Generator for the Envied package. See https://pub.dev/packages/envied.
  envied_generator: ^0.5.3

  # The "flutter_lints" package below contains a set of recommended lints to
  # encourage good coding practices. The lint set provided by the package is
  # activated in the `analysis_options.yaml` file located at the root of your
  # package. See that file for information about deactivating specific lint
  # rules and activating additional ones.
  flutter_lints: ^3.0.1
  flutter_test:
    sdk: flutter

  # A full featured library for writing and running Dart tests across platforms.
  json_serializable: ^6.7.1
  test: any

# For information on the generic Dart part of this file, see the
# following page: https://dart.dev/tools/pub/pubspec

# The following section is specific to Flutter packages.
flutter:

  # The following line ensures that the Material Icons font is
  # included with your application, so that you can use the icons in
  # the material Icons class.
  uses-material-design: true

  # To add assets to your application, add an assets section, like this:
  assets:
    - components/interface_adapters/assets/i18n/

  # An image asset can refer to one or more resolution-specific "variants", see
  # https://flutter.dev/assets-and-images/#resolution-aware

  # For details regarding adding assets from package dependencies, see
  # https://flutter.dev/assets-and-images/#from-packages

  # To add custom fonts to your application, add a fonts section here,
  # in this "flutter" section. Each entry in this list should have a
  # "family" key with the font family name, and a "fonts" key with a
  # list giving the asset and other descriptors for the font. For
  # example:
  # fonts:
  #   - family: Schyler
  #     fonts:
  #       - asset: fonts/Schyler-Regular.ttf
  #       - asset: fonts/Schyler-Italic.ttf
  #         style: italic
  #   - family: Trajan Pro
  #     fonts:
  #       - asset: fonts/TrajanPro.ttf
  #       - asset: fonts/TrajanPro_Bold.ttf
  #         weight: 700
  #
  # For details regarding fonts from package dependencies,
  # see https://flutter.dev/custom-fonts/#from-packages
