name: ethical_scanner
description: "Ethical Scanner is a Flutter project for Android and iOS mobile 
application that scans the barcode of a product and tells you if the product 
meets your ethical standards."

# The following line prevents the package from being accidentally published to
# pub.dev using `flutter pub publish`. This is preferred for private packages.
publish_to: 'none' # Remove this line if you wish to publish to pub.dev

# The following defines the version and build number for your application.
# A version number is three numbers separated by dots, like 1.2.43
# followed by an optional build number separated by a +.
# Both the version and the builder number may be overridden in Flutter
# build by specifying --build-name and --build-number, respectively.
# In Android, build-name is used as versionName while build-number is used as
# `versionCode`.
# Read more about Android versioning at
# https://developer.android.com/studio/publish/versioning
# In iOS, build-name is used as CFBundleShortVersionString while build-number
# is used as CFBundleVersion.
# Read more about iOS versioning at
# https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html
# In Windows, build-name is used as the major, minor, and patch parts
# of the product and file versions, while build-number is used as the build
# suffix.
version: 0.1.6+16

environment:
  sdk: '>=3.2.3 <4.0.0'

dependency_overrides:
  intl: ^0.20.2

# Dependencies specify other packages that your package needs to work.
# To automatically upgrade your package dependencies to the latest versions,
# consider running `flutter pub upgrade --major-versions`. Alternatively,
# dependencies can be manually updated by changing the version numbers below to
# the latest version available on pub.dev. To see which dependencies have newer
# versions available, run `flutter pub outdated`.
dependencies:
  audiofileplayer: ^2.1.1
  # The `bloc` library is a platform-agnostic package that provides the core
  # functionality for implementing the BLoC (Business Logic Component) design
  # pattern. The `flutter_bloc` package is a Flutter-specific package that
  # integrates the bloc library with Flutter widgets, such as `BlocProvider`
  # and `BlocBuilder`. To use bloc in a Flutter app, you need both packages
  # because they complement each other. The `bloc` package handles the logic
  # and state management, while the `flutter_bloc` package handles the UI and
  # presentation layer. You can think of the bloc package as the engine, and
  # the `flutter_bloc` package as the car body. You need both to make a
  # functional car ðŸš—.
  bloc: ^9.0.0
  camera: ^0.11.1
  collection: ^1.19.1
  # Dart SDK for openAI Apis (GPT-3 & DALL-E), easily integrate the power of
  # OpenAI's
  # state-of-the-art AI models into their Dart applications.
  dart_openai: ^5.1.0
  dio: ^5.8.0+1
  entities:
    path: ./components/domain/entities

  # Explicitly reads environment variables into a Dart file from a `.env` file
  # for more security and faster start-up times.
  envied: ^1.1.1
  feedback: ^3.1.0
  flutter:
    sdk: flutter

  # Built to be used with the `bloc` state management package.
  flutter_bloc: ^9.1.1

  # Localization / internationalization (i18n) library.
  flutter_translate: ^4.1.0

  http: ^1.4.0
  interface_adapters:
    path: ./components/interface_adapters

  json_annotation: ^4.9.0
  logger: ^2.5.0
  openfoodfacts: ^3.23.0

  package_info_plus: ^8.3.0
  path: ^1.9.1
  path_provider: ^2.1.5
  retrofit: ^4.4.2
  retrofit_generator: ^9.2.0
  shared_preferences: ^2.5.3
  use_cases:
    path: ./components/domain/use_cases
  window_size: ^0.1.0

dev_dependencies:
  # A build system for Dart code generation and modular compilation.
  build_runner: ^2.5.2

  # Generator for the Envied package. See https://pub.dev/packages/envied.
  envied_generator: ^1.1.1

  # The "flutter_lints" package below contains a set of recommended lints to
  # encourage good coding practices. The lint set provided by the package is
  # activated in the `analysis_options.yaml` file located at the root of your
  # package. See that file for information about deactivating specific lint
  # rules and activating additional ones.
  flutter_lints: ^6.0.0
  flutter_test:
    sdk: flutter

  # A full-featured library for writing and running Dart tests across platforms.
  json_serializable: ^6.9.5
  mockito: ^5.4.6
  test: any

# For information on the generic Dart part of this file, see the
# following page: https://dart.dev/tools/pub/pubspec

# The following section is specific to Flutter packages.
flutter:

  # The following line ensures that the Material Icons font is
  # included with your application, so that you can use the icons in
  # the material Icons class.
  uses-material-design: true

  # To add assets to your application, add an assets section, like this:
  assets:
    - components/interface_adapters/assets/i18n/
    - components/interface_adapters/assets/audio/
    - components/interface_adapters/assets/images/

  # An image asset can refer to one or more resolution-specific "variants", see
  # https://flutter.dev/assets-and-images/#resolution-aware

  # For details regarding adding assets from package dependencies, see
  # https://flutter.dev/assets-and-images/#from-packages

  # To add custom fonts to your application, add a fonts section here,
  # in this "flutter" section. Each entry in this list should have a
  # "family" key with the font family name, and a "fonts" key with a
  # list giving the asset and other descriptors for the font. For
  # example,
  # fonts:
  #   - family: Trajan Pro
  #     fonts:
  #       - asset: fonts/TrajanPro.ttf
  #       - asset: fonts/TrajanPro_Bold.ttf
  #         weight: 700
  #
  # For details regarding fonts from package dependencies,
  # see https://flutter.dev/custom-fonts/#from-packages
