//noinspection GrUnresolvedAccess
plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        //noinspection GroovyAssignabilityCheck
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty(
        'flutter.versionCode'
)
if (flutterVersionCode == null) {
    flutterVersionCode = '10'
}

def flutterVersionName = localProperties.getProperty(
        'flutter.versionName'
)
if (flutterVersionName == null) {
    flutterVersionName = '0.1.0'
}

def keyProperties = new Properties()
def keyPropertiesFile = rootProject.file('key.properties')
if (keyPropertiesFile.exists()) {
    keyPropertiesFile.withReader(
            'UTF-8'
    ) { reader -> keyProperties.load(reader)
    }
}

def SIGNING_KEY_DEBUG_PATH = keyProperties.getProperty(
        'SIGNING_KEY_DEBUG_PATH'
)
def SIGNING_KEY_DEBUG_PASSWORD = keyProperties.getProperty(
        'SIGNING_KEY_DEBUG_PASSWORD')
def SIGNING_KEY_DEBUG_KEY = keyProperties.getProperty('SIGNING_KEY_DEBUG_KEY'
)
def SIGNING_KEY_DEBUG_KEY_PASSWORD = keyProperties.getProperty(
        'SIGNING_KEY_DEBUG_KEY_PASSWORD'
)
def SIGNING_KEY_RELEASE_PATH = keyProperties.getProperty(
        'SIGNING_KEY_RELEASE_PATH'
)
def SIGNING_KEY_RELEASE_PASSWORD = keyProperties.getProperty(
        'SIGNING_KEY_RELEASE_PASSWORD'
)
def SIGNING_KEY_RELEASE_KEY = keyProperties.getProperty(
        'SIGNING_KEY_RELEASE_KEY'
)
def SIGNING_KEY_RELEASE_KEY_PASSWORD = keyProperties.getProperty(
        'SIGNING_KEY_RELEASE_KEY_PASSWORD'
)

android {
    //noinspection GroovyAssignabilityCheck
    namespace rootProject.application_id
    compileSdk flutter.compileSdkVersion
    //TODO: change to dynamic "flutter.ndkVersion" version, when the error is gone.
    ndkVersion "27.0.12077973"

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_11.toString()
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        //noinspection GroovyAssignabilityCheck
        applicationId rootProject.application_id

        //TODO: change to dynamic "flutter.minSdkVersion" value, when it will be possible.
        minSdkVersion 23
        //noinspection GroovyAssignabilityCheck
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName

        ndk {
            abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
        }
    }
    signingConfigs {
        production {
            // FCI_BUILD_ID is exported by Codemagic
            //noinspection GroovyAssignabilityCheck
            if (System.getenv()["FCI_BUILD_ID"] != null) {
                //noinspection GroovyAssignabilityCheck
                storeFile file(System.getenv()["CM_KEYSTORE_PATH"])
                //noinspection GroovyAssignabilityCheck
                storePassword System.getenv()["CM_KEYSTORE_PASSWORD"]
                //noinspection GroovyAssignabilityCheck
                keyAlias System.getenv()["CM_KEY_ALIAS"]
                //noinspection GroovyAssignabilityCheck
                keyPassword System.getenv()["CM_KEY_PASSWORD"]
            } else {
                storeFile file(SIGNING_KEY_RELEASE_PATH)
                storePassword SIGNING_KEY_RELEASE_PASSWORD
                keyAlias SIGNING_KEY_RELEASE_KEY
                keyPassword SIGNING_KEY_RELEASE_KEY_PASSWORD
            }
        }
        dev {
            // FCI_BUILD_ID is exported by Codemagic
            //noinspection GroovyAssignabilityCheck
            if (System.getenv()["FCI_BUILD_ID"] != null) {
                //noinspection GroovyAssignabilityCheck
                storeFile file(System.getenv()["CM_KEYSTORE_PATH"])
                //noinspection GroovyAssignabilityCheck
                storePassword System.getenv()["CM_KEYSTORE_PASSWORD"]
                //noinspection GroovyAssignabilityCheck
                keyAlias System.getenv()["CM_KEY_ALIAS"]
                //noinspection GroovyAssignabilityCheck
                keyPassword System.getenv()["CM_KEY_PASSWORD"]
            } else {
                storeFile file(SIGNING_KEY_DEBUG_PATH)
                storePassword SIGNING_KEY_DEBUG_PASSWORD
                keyAlias SIGNING_KEY_DEBUG_KEY
                keyPassword SIGNING_KEY_DEBUG_KEY_PASSWORD
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile(
                    'proguard-android-optimize.txt'
            ),
                    'proguard-rules.pro'
            //noinspection GroovyAssignabilityCheck
            signingConfig signingConfigs.production
        }
        debug {
            //noinspection GroovyAssignabilityCheck
            signingConfig signingConfigs.dev
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation 'com.google.firebase:firebase-crashlytics:20.0.0'
    implementation 'com.google.firebase:firebase-analytics:23.0.0'
}
